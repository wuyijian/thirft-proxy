/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "identity_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ReqProto::~ReqProto() throw() {
}


void ReqProto::__set_userid(const int32_t val) {
  this->userid = val;
}

uint32_t ReqProto::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqProto::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReqProto");

  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqProto &a, ReqProto &b) {
  using ::std::swap;
  swap(a.userid, b.userid);
  swap(a.__isset, b.__isset);
}

ReqProto::ReqProto(const ReqProto& other0) {
  userid = other0.userid;
  __isset = other0.__isset;
}
ReqProto& ReqProto::operator=(const ReqProto& other1) {
  userid = other1.userid;
  __isset = other1.__isset;
  return *this;
}
void ReqProto::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReqProto(";
  out << "userid=" << to_string(userid);
  out << ")";
}


AckProto::~AckProto() throw() {
}


void AckProto::__set_identity(const std::string& val) {
  this->identity = val;
}

uint32_t AckProto::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identity);
          this->__isset.identity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AckProto::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AckProto");

  xfer += oprot->writeFieldBegin("identity", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->identity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AckProto &a, AckProto &b) {
  using ::std::swap;
  swap(a.identity, b.identity);
  swap(a.__isset, b.__isset);
}

AckProto::AckProto(const AckProto& other2) {
  identity = other2.identity;
  __isset = other2.__isset;
}
AckProto& AckProto::operator=(const AckProto& other3) {
  identity = other3.identity;
  __isset = other3.__isset;
  return *this;
}
void AckProto::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AckProto(";
  out << "identity=" << to_string(identity);
  out << ")";
}


ReqCheckResult::~ReqCheckResult() throw() {
}


void ReqCheckResult::__set_message(const std::string& val) {
  this->message = val;
}

void ReqCheckResult::__set_flag(const int32_t val) {
  this->flag = val;
}

void ReqCheckResult::__set_appid(const int32_t val) {
  this->appid = val;
}

void ReqCheckResult::__set_gameid(const int32_t val) {
  this->gameid = val;
}

void ReqCheckResult::__set_nick(const std::string& val) {
  this->nick = val;
}

void ReqCheckResult::__set_type(const int8_t val) {
  this->type = val;
}

void ReqCheckResult::__set_serverid(const int32_t val) {
  this->serverid = val;
}

void ReqCheckResult::__set_userid(const int32_t val) {
  this->userid = val;
}

void ReqCheckResult::__set_rolegrade(const int32_t val) {
  this->rolegrade = val;
}

void ReqCheckResult::__set_vipgrade(const int32_t val) {
  this->vipgrade = val;
}

uint32_t ReqCheckResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flag);
          this->__isset.flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->appid);
          this->__isset.appid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gameid);
          this->__isset.gameid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick);
          this->__isset.nick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serverid);
          this->__isset.serverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rolegrade);
          this->__isset.rolegrade = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vipgrade);
          this->__isset.vipgrade = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqCheckResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReqCheckResult");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flag", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->appid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gameid", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->gameid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nick", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->nick);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverid", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->serverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->userid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rolegrade", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->rolegrade);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vipgrade", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->vipgrade);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqCheckResult &a, ReqCheckResult &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.flag, b.flag);
  swap(a.appid, b.appid);
  swap(a.gameid, b.gameid);
  swap(a.nick, b.nick);
  swap(a.type, b.type);
  swap(a.serverid, b.serverid);
  swap(a.userid, b.userid);
  swap(a.rolegrade, b.rolegrade);
  swap(a.vipgrade, b.vipgrade);
  swap(a.__isset, b.__isset);
}

ReqCheckResult::ReqCheckResult(const ReqCheckResult& other4) {
  message = other4.message;
  flag = other4.flag;
  appid = other4.appid;
  gameid = other4.gameid;
  nick = other4.nick;
  type = other4.type;
  serverid = other4.serverid;
  userid = other4.userid;
  rolegrade = other4.rolegrade;
  vipgrade = other4.vipgrade;
  __isset = other4.__isset;
}
ReqCheckResult& ReqCheckResult::operator=(const ReqCheckResult& other5) {
  message = other5.message;
  flag = other5.flag;
  appid = other5.appid;
  gameid = other5.gameid;
  nick = other5.nick;
  type = other5.type;
  serverid = other5.serverid;
  userid = other5.userid;
  rolegrade = other5.rolegrade;
  vipgrade = other5.vipgrade;
  __isset = other5.__isset;
  return *this;
}
void ReqCheckResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReqCheckResult(";
  out << "message=" << to_string(message);
  out << ", " << "flag=" << to_string(flag);
  out << ", " << "appid=" << to_string(appid);
  out << ", " << "gameid=" << to_string(gameid);
  out << ", " << "nick=" << to_string(nick);
  out << ", " << "type=" << to_string(type);
  out << ", " << "serverid=" << to_string(serverid);
  out << ", " << "userid=" << to_string(userid);
  out << ", " << "rolegrade=" << to_string(rolegrade);
  out << ", " << "vipgrade=" << to_string(vipgrade);
  out << ")";
}


