/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TisService_H
#define TisService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "tis_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TisServiceIf {
 public:
  virtual ~TisServiceIf() {}
  virtual void ping() = 0;

  /**
   * 重新加载模型
   */
  virtual int32_t reloadModel() = 0;
  virtual void check(CheckResultStruct& _return, const RequestCheckStruct& req) = 0;
};

class TisServiceIfFactory {
 public:
  typedef TisServiceIf Handler;

  virtual ~TisServiceIfFactory() {}

  virtual TisServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TisServiceIf* /* handler */) = 0;
};

class TisServiceIfSingletonFactory : virtual public TisServiceIfFactory {
 public:
  TisServiceIfSingletonFactory(const boost::shared_ptr<TisServiceIf>& iface) : iface_(iface) {}
  virtual ~TisServiceIfSingletonFactory() {}

  virtual TisServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TisServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TisServiceIf> iface_;
};

class TisServiceNull : virtual public TisServiceIf {
 public:
  virtual ~TisServiceNull() {}
  void ping() {
    return;
  }
  int32_t reloadModel() {
    int32_t _return = 0;
    return _return;
  }
  void check(CheckResultStruct& /* _return */, const RequestCheckStruct& /* req */) {
    return;
  }
};


class TisService_ping_args {
 public:

  TisService_ping_args(const TisService_ping_args&);
  TisService_ping_args& operator=(const TisService_ping_args&);
  TisService_ping_args() {
  }

  virtual ~TisService_ping_args() throw();

  bool operator == (const TisService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TisService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TisService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TisService_ping_pargs {
 public:


  virtual ~TisService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TisService_ping_result {
 public:

  TisService_ping_result(const TisService_ping_result&);
  TisService_ping_result& operator=(const TisService_ping_result&);
  TisService_ping_result() {
  }

  virtual ~TisService_ping_result() throw();

  bool operator == (const TisService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TisService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TisService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TisService_ping_presult {
 public:


  virtual ~TisService_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TisService_reloadModel_args {
 public:

  TisService_reloadModel_args(const TisService_reloadModel_args&);
  TisService_reloadModel_args& operator=(const TisService_reloadModel_args&);
  TisService_reloadModel_args() {
  }

  virtual ~TisService_reloadModel_args() throw();

  bool operator == (const TisService_reloadModel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TisService_reloadModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TisService_reloadModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TisService_reloadModel_pargs {
 public:


  virtual ~TisService_reloadModel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TisService_reloadModel_result__isset {
  _TisService_reloadModel_result__isset() : success(false) {}
  bool success :1;
} _TisService_reloadModel_result__isset;

class TisService_reloadModel_result {
 public:

  TisService_reloadModel_result(const TisService_reloadModel_result&);
  TisService_reloadModel_result& operator=(const TisService_reloadModel_result&);
  TisService_reloadModel_result() : success(0) {
  }

  virtual ~TisService_reloadModel_result() throw();
  int32_t success;

  _TisService_reloadModel_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TisService_reloadModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TisService_reloadModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TisService_reloadModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TisService_reloadModel_presult__isset {
  _TisService_reloadModel_presult__isset() : success(false) {}
  bool success :1;
} _TisService_reloadModel_presult__isset;

class TisService_reloadModel_presult {
 public:


  virtual ~TisService_reloadModel_presult() throw();
  int32_t* success;

  _TisService_reloadModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TisService_check_args__isset {
  _TisService_check_args__isset() : req(false) {}
  bool req :1;
} _TisService_check_args__isset;

class TisService_check_args {
 public:

  TisService_check_args(const TisService_check_args&);
  TisService_check_args& operator=(const TisService_check_args&);
  TisService_check_args() {
  }

  virtual ~TisService_check_args() throw();
  RequestCheckStruct req;

  _TisService_check_args__isset __isset;

  void __set_req(const RequestCheckStruct& val);

  bool operator == (const TisService_check_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TisService_check_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TisService_check_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TisService_check_pargs {
 public:


  virtual ~TisService_check_pargs() throw();
  const RequestCheckStruct* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TisService_check_result__isset {
  _TisService_check_result__isset() : success(false) {}
  bool success :1;
} _TisService_check_result__isset;

class TisService_check_result {
 public:

  TisService_check_result(const TisService_check_result&);
  TisService_check_result& operator=(const TisService_check_result&);
  TisService_check_result() {
  }

  virtual ~TisService_check_result() throw();
  CheckResultStruct success;

  _TisService_check_result__isset __isset;

  void __set_success(const CheckResultStruct& val);

  bool operator == (const TisService_check_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TisService_check_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TisService_check_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TisService_check_presult__isset {
  _TisService_check_presult__isset() : success(false) {}
  bool success :1;
} _TisService_check_presult__isset;

class TisService_check_presult {
 public:


  virtual ~TisService_check_presult() throw();
  CheckResultStruct* success;

  _TisService_check_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TisServiceClient : virtual public TisServiceIf {
 public:
  TisServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TisServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int32_t reloadModel();
  void send_reloadModel();
  int32_t recv_reloadModel();
  void check(CheckResultStruct& _return, const RequestCheckStruct& req);
  void send_check(const RequestCheckStruct& req);
  void recv_check(CheckResultStruct& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TisServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TisServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TisServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reloadModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TisServiceProcessor(boost::shared_ptr<TisServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &TisServiceProcessor::process_ping;
    processMap_["reloadModel"] = &TisServiceProcessor::process_reloadModel;
    processMap_["check"] = &TisServiceProcessor::process_check;
  }

  virtual ~TisServiceProcessor() {}
};

class TisServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TisServiceProcessorFactory(const ::boost::shared_ptr< TisServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TisServiceIfFactory > handlerFactory_;
};

class TisServiceMultiface : virtual public TisServiceIf {
 public:
  TisServiceMultiface(std::vector<boost::shared_ptr<TisServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TisServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TisServiceIf> > ifaces_;
  TisServiceMultiface() {}
  void add(boost::shared_ptr<TisServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t reloadModel() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reloadModel();
    }
    return ifaces_[i]->reloadModel();
  }

  void check(CheckResultStruct& _return, const RequestCheckStruct& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check(_return, req);
    }
    ifaces_[i]->check(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TisServiceConcurrentClient : virtual public TisServiceIf {
 public:
  TisServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TisServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t reloadModel();
  int32_t send_reloadModel();
  int32_t recv_reloadModel(const int32_t seqid);
  void check(CheckResultStruct& _return, const RequestCheckStruct& req);
  int32_t send_check(const RequestCheckStruct& req);
  void recv_check(CheckResultStruct& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
