/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tis_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




CheckResultStruct::~CheckResultStruct() throw() {
}


void CheckResultStruct::__set_code(const int32_t val) {
  this->code = val;
}

void CheckResultStruct::__set_action(const int32_t val) {
  this->action = val;
}

void CheckResultStruct::__set_label(const int32_t val) {
  this->label = val;
}

void CheckResultStruct::__set_level(const int32_t val) {
  this->level = val;
}

void CheckResultStruct::__set_detail(const std::string& val) {
  this->detail = val;
}

uint32_t CheckResultStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->action);
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->label);
          this->__isset.label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detail);
          this->__isset.detail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckResultStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckResultStruct");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->action);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detail", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->detail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckResultStruct &a, CheckResultStruct &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.action, b.action);
  swap(a.label, b.label);
  swap(a.level, b.level);
  swap(a.detail, b.detail);
  swap(a.__isset, b.__isset);
}

CheckResultStruct::CheckResultStruct(const CheckResultStruct& other0) {
  code = other0.code;
  action = other0.action;
  label = other0.label;
  level = other0.level;
  detail = other0.detail;
  __isset = other0.__isset;
}
CheckResultStruct& CheckResultStruct::operator=(const CheckResultStruct& other1) {
  code = other1.code;
  action = other1.action;
  label = other1.label;
  level = other1.level;
  detail = other1.detail;
  __isset = other1.__isset;
  return *this;
}
void CheckResultStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckResultStruct(";
  out << "code=" << to_string(code);
  out << ", " << "action=" << to_string(action);
  out << ", " << "label=" << to_string(label);
  out << ", " << "level=" << to_string(level);
  out << ", " << "detail=" << to_string(detail);
  out << ")";
}


RequestCheckStruct::~RequestCheckStruct() throw() {
}


void RequestCheckStruct::__set_appid(const int32_t val) {
  this->appid = val;
}

void RequestCheckStruct::__set_gameid(const int32_t val) {
  this->gameid = val;
}

void RequestCheckStruct::__set_content(const std::string& val) {
  this->content = val;
}

void RequestCheckStruct::__set_dataid(const std::string& val) {
  this->dataid = val;
}

void RequestCheckStruct::__set_userid(const std::string& val) {
  this->userid = val;
}

void RequestCheckStruct::__set_ip(const std::string& val) {
  this->ip = val;
}

uint32_t RequestCheckStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->appid);
          this->__isset.appid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gameid);
          this->__isset.gameid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataid);
          this->__isset.dataid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestCheckStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestCheckStruct");

  xfer += oprot->writeFieldBegin("appid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->appid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gameid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->gameid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataid", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dataid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->userid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestCheckStruct &a, RequestCheckStruct &b) {
  using ::std::swap;
  swap(a.appid, b.appid);
  swap(a.gameid, b.gameid);
  swap(a.content, b.content);
  swap(a.dataid, b.dataid);
  swap(a.userid, b.userid);
  swap(a.ip, b.ip);
  swap(a.__isset, b.__isset);
}

RequestCheckStruct::RequestCheckStruct(const RequestCheckStruct& other2) {
  appid = other2.appid;
  gameid = other2.gameid;
  content = other2.content;
  dataid = other2.dataid;
  userid = other2.userid;
  ip = other2.ip;
  __isset = other2.__isset;
}
RequestCheckStruct& RequestCheckStruct::operator=(const RequestCheckStruct& other3) {
  appid = other3.appid;
  gameid = other3.gameid;
  content = other3.content;
  dataid = other3.dataid;
  userid = other3.userid;
  ip = other3.ip;
  __isset = other3.__isset;
  return *this;
}
void RequestCheckStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestCheckStruct(";
  out << "appid=" << to_string(appid);
  out << ", " << "gameid=" << to_string(gameid);
  out << ", " << "content=" << to_string(content);
  out << ", " << "dataid=" << to_string(dataid);
  out << ", " << "userid=" << to_string(userid);
  out << ", " << "ip=" << to_string(ip);
  out << ")";
}


