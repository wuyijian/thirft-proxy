/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef identity_TYPES_H
#define identity_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class ReqProto;

class AckProto;

class ReqCheckResult;

typedef struct _ReqProto__isset {
  _ReqProto__isset() : userid(false) {}
  bool userid :1;
} _ReqProto__isset;

class ReqProto : public virtual ::apache::thrift::TBase {
 public:

  ReqProto(const ReqProto&);
  ReqProto& operator=(const ReqProto&);
  ReqProto() : userid(0) {
  }

  virtual ~ReqProto() throw();
  int32_t userid;

  _ReqProto__isset __isset;

  void __set_userid(const int32_t val);

  bool operator == (const ReqProto & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const ReqProto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqProto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReqProto &a, ReqProto &b);

inline std::ostream& operator<<(std::ostream& out, const ReqProto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AckProto__isset {
  _AckProto__isset() : identity(false) {}
  bool identity :1;
} _AckProto__isset;

class AckProto : public virtual ::apache::thrift::TBase {
 public:

  AckProto(const AckProto&);
  AckProto& operator=(const AckProto&);
  AckProto() : identity() {
  }

  virtual ~AckProto() throw();
  std::string identity;

  _AckProto__isset __isset;

  void __set_identity(const std::string& val);

  bool operator == (const AckProto & rhs) const
  {
    if (!(identity == rhs.identity))
      return false;
    return true;
  }
  bool operator != (const AckProto &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AckProto & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AckProto &a, AckProto &b);

inline std::ostream& operator<<(std::ostream& out, const AckProto& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ReqCheckResult__isset {
  _ReqCheckResult__isset() : message(false), flag(false), appid(false), gameid(false), nick(false), type(false), serverid(false), userid(false), rolegrade(false), vipgrade(false) {}
  bool message :1;
  bool flag :1;
  bool appid :1;
  bool gameid :1;
  bool nick :1;
  bool type :1;
  bool serverid :1;
  bool userid :1;
  bool rolegrade :1;
  bool vipgrade :1;
} _ReqCheckResult__isset;

class ReqCheckResult : public virtual ::apache::thrift::TBase {
 public:

  ReqCheckResult(const ReqCheckResult&);
  ReqCheckResult& operator=(const ReqCheckResult&);
  ReqCheckResult() : message(), flag(0), appid(0), gameid(0), nick(), type(0), serverid(0), userid(0), rolegrade(0), vipgrade(0) {
  }

  virtual ~ReqCheckResult() throw();
  std::string message;
  int32_t flag;
  int32_t appid;
  int32_t gameid;
  std::string nick;
  int8_t type;
  int32_t serverid;
  int32_t userid;
  int32_t rolegrade;
  int32_t vipgrade;

  _ReqCheckResult__isset __isset;

  void __set_message(const std::string& val);

  void __set_flag(const int32_t val);

  void __set_appid(const int32_t val);

  void __set_gameid(const int32_t val);

  void __set_nick(const std::string& val);

  void __set_type(const int8_t val);

  void __set_serverid(const int32_t val);

  void __set_userid(const int32_t val);

  void __set_rolegrade(const int32_t val);

  void __set_vipgrade(const int32_t val);

  bool operator == (const ReqCheckResult & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(flag == rhs.flag))
      return false;
    if (!(appid == rhs.appid))
      return false;
    if (!(gameid == rhs.gameid))
      return false;
    if (!(nick == rhs.nick))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(serverid == rhs.serverid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(rolegrade == rhs.rolegrade))
      return false;
    if (!(vipgrade == rhs.vipgrade))
      return false;
    return true;
  }
  bool operator != (const ReqCheckResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqCheckResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReqCheckResult &a, ReqCheckResult &b);

inline std::ostream& operator<<(std::ostream& out, const ReqCheckResult& obj)
{
  obj.printTo(out);
  return out;
}



#endif
