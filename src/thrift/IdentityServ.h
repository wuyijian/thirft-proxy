/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IdentityServ_H
#define IdentityServ_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "identity_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IdentityServIf {
 public:
  virtual ~IdentityServIf() {}
  virtual void GetIdentity(AckProto& _return, const ReqProto& s) = 0;
  virtual int32_t StoreMessage(const ReqCheckResult& s) = 0;
};

class IdentityServIfFactory {
 public:
  typedef IdentityServIf Handler;

  virtual ~IdentityServIfFactory() {}

  virtual IdentityServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IdentityServIf* /* handler */) = 0;
};

class IdentityServIfSingletonFactory : virtual public IdentityServIfFactory {
 public:
  IdentityServIfSingletonFactory(const boost::shared_ptr<IdentityServIf>& iface) : iface_(iface) {}
  virtual ~IdentityServIfSingletonFactory() {}

  virtual IdentityServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IdentityServIf* /* handler */) {}

 protected:
  boost::shared_ptr<IdentityServIf> iface_;
};

class IdentityServNull : virtual public IdentityServIf {
 public:
  virtual ~IdentityServNull() {}
  void GetIdentity(AckProto& /* _return */, const ReqProto& /* s */) {
    return;
  }
  int32_t StoreMessage(const ReqCheckResult& /* s */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _IdentityServ_GetIdentity_args__isset {
  _IdentityServ_GetIdentity_args__isset() : s(false) {}
  bool s :1;
} _IdentityServ_GetIdentity_args__isset;

class IdentityServ_GetIdentity_args {
 public:

  IdentityServ_GetIdentity_args(const IdentityServ_GetIdentity_args&);
  IdentityServ_GetIdentity_args& operator=(const IdentityServ_GetIdentity_args&);
  IdentityServ_GetIdentity_args() {
  }

  virtual ~IdentityServ_GetIdentity_args() throw();
  ReqProto s;

  _IdentityServ_GetIdentity_args__isset __isset;

  void __set_s(const ReqProto& val);

  bool operator == (const IdentityServ_GetIdentity_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const IdentityServ_GetIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdentityServ_GetIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IdentityServ_GetIdentity_pargs {
 public:


  virtual ~IdentityServ_GetIdentity_pargs() throw();
  const ReqProto* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IdentityServ_GetIdentity_result__isset {
  _IdentityServ_GetIdentity_result__isset() : success(false) {}
  bool success :1;
} _IdentityServ_GetIdentity_result__isset;

class IdentityServ_GetIdentity_result {
 public:

  IdentityServ_GetIdentity_result(const IdentityServ_GetIdentity_result&);
  IdentityServ_GetIdentity_result& operator=(const IdentityServ_GetIdentity_result&);
  IdentityServ_GetIdentity_result() {
  }

  virtual ~IdentityServ_GetIdentity_result() throw();
  AckProto success;

  _IdentityServ_GetIdentity_result__isset __isset;

  void __set_success(const AckProto& val);

  bool operator == (const IdentityServ_GetIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const IdentityServ_GetIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdentityServ_GetIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IdentityServ_GetIdentity_presult__isset {
  _IdentityServ_GetIdentity_presult__isset() : success(false) {}
  bool success :1;
} _IdentityServ_GetIdentity_presult__isset;

class IdentityServ_GetIdentity_presult {
 public:


  virtual ~IdentityServ_GetIdentity_presult() throw();
  AckProto* success;

  _IdentityServ_GetIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IdentityServ_StoreMessage_args__isset {
  _IdentityServ_StoreMessage_args__isset() : s(false) {}
  bool s :1;
} _IdentityServ_StoreMessage_args__isset;

class IdentityServ_StoreMessage_args {
 public:

  IdentityServ_StoreMessage_args(const IdentityServ_StoreMessage_args&);
  IdentityServ_StoreMessage_args& operator=(const IdentityServ_StoreMessage_args&);
  IdentityServ_StoreMessage_args() {
  }

  virtual ~IdentityServ_StoreMessage_args() throw();
  ReqCheckResult s;

  _IdentityServ_StoreMessage_args__isset __isset;

  void __set_s(const ReqCheckResult& val);

  bool operator == (const IdentityServ_StoreMessage_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const IdentityServ_StoreMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdentityServ_StoreMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IdentityServ_StoreMessage_pargs {
 public:


  virtual ~IdentityServ_StoreMessage_pargs() throw();
  const ReqCheckResult* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IdentityServ_StoreMessage_result__isset {
  _IdentityServ_StoreMessage_result__isset() : success(false) {}
  bool success :1;
} _IdentityServ_StoreMessage_result__isset;

class IdentityServ_StoreMessage_result {
 public:

  IdentityServ_StoreMessage_result(const IdentityServ_StoreMessage_result&);
  IdentityServ_StoreMessage_result& operator=(const IdentityServ_StoreMessage_result&);
  IdentityServ_StoreMessage_result() : success(0) {
  }

  virtual ~IdentityServ_StoreMessage_result() throw();
  int32_t success;

  _IdentityServ_StoreMessage_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const IdentityServ_StoreMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const IdentityServ_StoreMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdentityServ_StoreMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IdentityServ_StoreMessage_presult__isset {
  _IdentityServ_StoreMessage_presult__isset() : success(false) {}
  bool success :1;
} _IdentityServ_StoreMessage_presult__isset;

class IdentityServ_StoreMessage_presult {
 public:


  virtual ~IdentityServ_StoreMessage_presult() throw();
  int32_t* success;

  _IdentityServ_StoreMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IdentityServClient : virtual public IdentityServIf {
 public:
  IdentityServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IdentityServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetIdentity(AckProto& _return, const ReqProto& s);
  void send_GetIdentity(const ReqProto& s);
  void recv_GetIdentity(AckProto& _return);
  int32_t StoreMessage(const ReqCheckResult& s);
  void send_StoreMessage(const ReqCheckResult& s);
  int32_t recv_StoreMessage();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IdentityServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<IdentityServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IdentityServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StoreMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IdentityServProcessor(boost::shared_ptr<IdentityServIf> iface) :
    iface_(iface) {
    processMap_["GetIdentity"] = &IdentityServProcessor::process_GetIdentity;
    processMap_["StoreMessage"] = &IdentityServProcessor::process_StoreMessage;
  }

  virtual ~IdentityServProcessor() {}
};

class IdentityServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IdentityServProcessorFactory(const ::boost::shared_ptr< IdentityServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< IdentityServIfFactory > handlerFactory_;
};

class IdentityServMultiface : virtual public IdentityServIf {
 public:
  IdentityServMultiface(std::vector<boost::shared_ptr<IdentityServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IdentityServMultiface() {}
 protected:
  std::vector<boost::shared_ptr<IdentityServIf> > ifaces_;
  IdentityServMultiface() {}
  void add(boost::shared_ptr<IdentityServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetIdentity(AckProto& _return, const ReqProto& s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetIdentity(_return, s);
    }
    ifaces_[i]->GetIdentity(_return, s);
    return;
  }

  int32_t StoreMessage(const ReqCheckResult& s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StoreMessage(s);
    }
    return ifaces_[i]->StoreMessage(s);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IdentityServConcurrentClient : virtual public IdentityServIf {
 public:
  IdentityServConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IdentityServConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetIdentity(AckProto& _return, const ReqProto& s);
  int32_t send_GetIdentity(const ReqProto& s);
  void recv_GetIdentity(AckProto& _return, const int32_t seqid);
  int32_t StoreMessage(const ReqCheckResult& s);
  int32_t send_StoreMessage(const ReqCheckResult& s);
  int32_t recv_StoreMessage(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
